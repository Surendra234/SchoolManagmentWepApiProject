// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagmentSystem.Data;

#nullable disable

namespace SchoolManagmentSystem.Migrations
{
    [DbContext(typeof(SchoolManagmentDbContext))]
    [Migration("20230414092318_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Courses", b =>
                {
                    b.Property<int>("course_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("course_desc")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("course_name")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<int>("school_yr")
                        .HasColumnType("int");

                    b.HasKey("course_ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Instructor", b =>
                {
                    b.Property<int>("ins_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int>("contact_no")
                        .HasColumnType("int");

                    b.Property<string>("fname")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("ins_email")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("ins_pass")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("lname")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.HasKey("ins_ID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Schedules", b =>
                {
                    b.Property<int>("sched_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Coursescourse_ID")
                        .HasColumnType("int");

                    b.Property<int>("Instructorins_ID")
                        .HasColumnType("int");

                    b.Property<int>("Studentsstud_ID")
                        .HasColumnType("int");

                    b.Property<int>("Subjectssub_ID")
                        .HasColumnType("int");

                    b.Property<int>("course_ID")
                        .HasColumnType("int");

                    b.Property<string>("day")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ins_ID")
                        .HasColumnType("int");

                    b.Property<int>("stud_ID")
                        .HasColumnType("int");

                    b.Property<int>("sub_ID")
                        .HasColumnType("int");

                    b.Property<string>("time_end")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("time_start")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("sched_ID");

                    b.HasIndex("Coursescourse_ID");

                    b.HasIndex("Instructorins_ID");

                    b.HasIndex("Studentsstud_ID");

                    b.HasIndex("Subjectssub_ID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Subjects", b =>
                {
                    b.Property<int>("sub_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Coursescourse_ID")
                        .HasColumnType("int");

                    b.Property<int>("course_ID")
                        .HasColumnType("int");

                    b.Property<string>("sub_name")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.HasKey("sub_ID");

                    b.HasIndex("Coursescourse_ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Transactions", b =>
                {
                    b.Property<int>("trans_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Studentsstud_ID")
                        .HasColumnType("int");

                    b.Property<int>("stud_ID")
                        .HasColumnType("int");

                    b.Property<string>("trans_date")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("trans_name")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.HasKey("trans_ID");

                    b.HasIndex("Studentsstud_ID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SchoolManagmentSystem.Students", b =>
                {
                    b.Property<int>("stud_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int>("contact_no")
                        .HasColumnType("int");

                    b.Property<string>("fname")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("lname")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("stud_email")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("stud_pass")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.HasKey("stud_ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Schedules", b =>
                {
                    b.HasOne("SchoolManagmentSystem.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Coursescourse_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagmentSystem.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("Instructorins_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagmentSystem.Students", "Students")
                        .WithMany()
                        .HasForeignKey("Studentsstud_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagmentSystem.Models.Subjects", "Subjects")
                        .WithMany()
                        .HasForeignKey("Subjectssub_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("Instructor");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Subjects", b =>
                {
                    b.HasOne("SchoolManagmentSystem.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("Coursescourse_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SchoolManagmentSystem.Models.Transactions", b =>
                {
                    b.HasOne("SchoolManagmentSystem.Students", "Students")
                        .WithMany()
                        .HasForeignKey("Studentsstud_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
